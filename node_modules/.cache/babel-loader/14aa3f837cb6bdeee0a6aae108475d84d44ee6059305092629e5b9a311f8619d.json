{"ast":null,"code":"import Panel from \"./panel.js\";\nconst _Stats = class _Stats {\n  constructor() {\n    let {\n      logsPerSecond = 20,\n      samplesLog = 100,\n      samplesGraph = 10,\n      precision = 2,\n      minimal = false,\n      horizontal = true,\n      mode = 0\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.container = document.createElement(\"div\");\n    this.container.style.cssText = \"position:fixed;top:0;left:0;opacity:0.9;z-index:10000;\";\n    if (minimal) {\n      this.container.style.cssText += \"cursor:pointer\";\n    }\n    this.canvasGpu = null;\n    this.gl = null;\n    this.query = null;\n    this.minimal = minimal;\n    this.beginTime = (performance || Date).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n    this.queryCreated = false;\n    this.fpsPanel = this.addPanel(new _Stats.Panel(\"FPS\", \"#0ff\", \"#002\"), 0);\n    this.msPanel = this.addPanel(new _Stats.Panel(\"CPU\", \"#0f0\", \"#020\"), 1);\n    this.gpuPanel = null;\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n    if (this.minimal) {\n      this.container.addEventListener(\"click\", event => {\n        event.preventDefault();\n        this.showPanel(++this.mode % this.container.children.length);\n      }, false);\n      this.mode = mode;\n      this.showPanel(this.mode);\n    } else {\n      window.addEventListener(\"resize\", () => {\n        this.resizePanel(this.fpsPanel, 0);\n        this.resizePanel(this.msPanel, 1);\n        if (this.gpuPanel) {\n          this.resizePanel(this.gpuPanel, 2);\n        }\n      });\n    }\n  }\n  resizePanel(panel, offset) {\n    panel.canvas.style.position = \"absolute\";\n    if (this.minimal) {\n      panel.canvas.style.display = \"none\";\n    } else {\n      panel.canvas.style.display = \"block\";\n      if (this.horizontal) {\n        panel.canvas.style.top = \"0px\";\n        panel.canvas.style.left = offset * panel.WIDTH / panel.PR + \"px\";\n      } else {\n        panel.canvas.style.left = \"0px\";\n        panel.canvas.style.top = offset * panel.HEIGHT / panel.PR + \"px\";\n      }\n    }\n  }\n  addPanel(panel, offset) {\n    if (panel.canvas) {\n      this.container.appendChild(panel.canvas);\n      this.resizePanel(panel, offset);\n    }\n    return panel;\n  }\n  showPanel(id) {\n    for (let i = 0; i < this.container.children.length; i++) {\n      const child = this.container.children[i];\n      child.style.display = i === id ? \"block\" : \"none\";\n    }\n    this.mode = id;\n  }\n  init(canvas) {\n    this.canvasGpu = canvas;\n    if (!this.canvasGpu) return;\n    this.gl = this.canvasGpu.getContext(\"webgl2\");\n    this.ext = this.gl ? this.gl.getExtension(\"EXT_disjoint_timer_query_webgl2\") : null;\n    if (this.ext) {\n      this.gpuPanel = this.addPanel(new _Stats.Panel(\"GPU\", \"#ff0\", \"#220\"), 2);\n    }\n  }\n  begin() {\n    this.beginProfiling(\"cpu-started\");\n    if (!this.gl || !this.ext) return;\n    if (this.query) {\n      const available = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT_AVAILABLE);\n      this.disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);\n      if (available && !this.disjoint) {\n        this.ns = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT);\n        const ms = this.ns * 1e-6;\n        if (available || this.disjoint) {\n          this.gl.deleteQuery(this.query);\n          this.query = null;\n        }\n        if (available) {\n          this.addToAverage(ms, this.averageGpu);\n        }\n      }\n    }\n    if (!this.query) {\n      this.queryCreated = true;\n      this.query = this.gl.createQuery();\n      if (this.query) {\n        this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.query);\n      }\n    }\n  }\n  end() {\n    this.beginTime = this.endInternal();\n    this.endProfiling(\"cpu-started\", \"cpu-finished\", \"cpu-duration\", this.averageCpu);\n    if (!this.gl || !this.ext) return;\n    if (this.queryCreated && this.gl.getQuery(this.ext.TIME_ELAPSED_EXT, this.gl.CURRENT_QUERY)) {\n      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n    }\n  }\n  endInternal() {\n    this.frames++;\n    const time = (performance || Date).now();\n    if (time >= this.prevCpuTime + 1e3 / this.logsPerSecond) {\n      this.updatePanel(this.msPanel, this.averageCpu);\n      this.updatePanel(this.gpuPanel, this.averageGpu);\n      this.prevCpuTime = time;\n    }\n    if (time >= this.prevTime + 1e3) {\n      const fps = this.frames * 1e3 / (time - this.prevTime);\n      this.fpsPanel.update(fps, fps, 100, 100, 0);\n      this.prevTime = time;\n      this.frames = 0;\n    }\n    return time;\n  }\n  addToAverage(value, averageArray) {\n    averageArray.logs.push(value);\n    if (averageArray.logs.length > this.samplesLog) {\n      averageArray.logs.shift();\n    }\n    averageArray.graph.push(value);\n    if (averageArray.graph.length > this.samplesGraph) {\n      averageArray.graph.shift();\n    }\n  }\n  beginProfiling(marker) {\n    if (window.performance) {\n      window.performance.mark(marker);\n    }\n  }\n  endProfiling(startMarker, endMarker, measureName, averageArray) {\n    if (window.performance && endMarker) {\n      window.performance.mark(endMarker);\n      const cpuMeasure = performance.measure(measureName, startMarker, endMarker);\n      this.addToAverage(cpuMeasure.duration, averageArray);\n    }\n  }\n  updatePanel(panel, averageArray) {\n    if (averageArray.logs.length > 0) {\n      let sumLog = 0;\n      let max = 0.01;\n      for (let i = 0; i < averageArray.logs.length; i++) {\n        sumLog += averageArray.logs[i];\n        if (averageArray.logs[i] > max) {\n          max = averageArray.logs[i];\n        }\n      }\n      let sumGraph = 0;\n      let maxGraph = 0.01;\n      for (let i = 0; i < averageArray.graph.length; i++) {\n        sumGraph += averageArray.graph[i];\n        if (averageArray.graph[i] > maxGraph) {\n          maxGraph = averageArray.graph[i];\n        }\n      }\n      if (panel) {\n        panel.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, this.precision);\n      }\n    }\n  }\n};\n_Stats.Panel = Panel;\nlet Stats = _Stats;\nexport { Stats as default };","map":{"version":3,"names":["_Stats","constructor","logsPerSecond","samplesLog","samplesGraph","precision","minimal","horizontal","mode","arguments","length","undefined","container","document","createElement","style","cssText","canvasGpu","gl","query","beginTime","performance","Date","now","prevTime","prevCpuTime","frames","averageCpu","logs","graph","averageGpu","queryCreated","fpsPanel","addPanel","Panel","msPanel","gpuPanel","addEventListener","event","preventDefault","showPanel","children","window","resizePanel","panel","offset","canvas","position","display","top","left","WIDTH","PR","HEIGHT","appendChild","id","i","child","init","getContext","ext","getExtension","begin","beginProfiling","available","getQueryParameter","QUERY_RESULT_AVAILABLE","disjoint","getParameter","GPU_DISJOINT_EXT","ns","QUERY_RESULT","ms","deleteQuery","addToAverage","createQuery","beginQuery","TIME_ELAPSED_EXT","end","endInternal","endProfiling","getQuery","CURRENT_QUERY","endQuery","time","updatePanel","fps","update","value","averageArray","push","shift","marker","mark","startMarker","endMarker","measureName","cpuMeasure","measure","duration","sumLog","max","sumGraph","maxGraph","Math","min","Stats"],"sources":["/home/precious/Desktop/threefibrejs/node_modules/stats-gl/lib/main.ts"],"sourcesContent":["import Panel from \"./panel\";\n\nexport interface AverageArray {\n  logs: number[];\n  graph: number[];\n}\n\n\nclass Stats {\n  mode: number;\n  container: HTMLDivElement;\n  minimal: boolean;\n  horizontal: boolean;\n  beginTime: number;\n  prevTime: number;\n  prevCpuTime: number;\n  frames: number;\n  averageCpu: AverageArray;\n  averageGpu: AverageArray;\n  queryCreated: boolean;\n  fpsPanel: Panel;\n  static Panel: typeof Panel = Panel;\n  msPanel: Panel;\n  gpuPanel: Panel | null;\n  samplesLog: number;\n  samplesGraph: number;\n  logsPerSecond: number;\n  precision: number;\n  canvasGpu: HTMLCanvasElement | null;\n  gl: WebGL2RenderingContext | null;\n  ext: any;\n  query: WebGLQuery | null;\n  disjoint: any;\n  ns: any;\n\n  constructor( { logsPerSecond = 20, samplesLog = 100, samplesGraph = 10, precision = 2, minimal = false, horizontal = true, mode = 0 } = {} ) {\n\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.container = document.createElement( 'div' );\n    this.container.style.cssText = 'position:fixed;top:0;left:0;opacity:0.9;z-index:10000;';\n\n    if ( minimal ) {\n\n      this.container.style.cssText += 'cursor:pointer';\n\n    }\n\n    this.canvasGpu = null;\n    this.gl = null;\n    this.query =  null;\n\n    this.minimal = minimal;\n\n    this.beginTime = ( performance || Date ).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n\n    this.queryCreated = false;\n\n    this.fpsPanel = this.addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ), 0 );\n    this.msPanel = this.addPanel( new Stats.Panel( 'CPU', '#0f0', '#020' ), 1 );\n    this.gpuPanel = null;\n\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n\n    if ( this.minimal ) {\n\n      this.container.addEventListener( 'click', ( event ) => {\n\n        event.preventDefault();\n        this.showPanel( ++ this.mode % this.container.children.length );\n\n      }, false );\n\n      this.mode = mode;\n      this.showPanel( this.mode );\n\n    } else {\n\n      window.addEventListener('resize', () =>{\n        \n        this.resizePanel( this.fpsPanel, 0 );\n        this.resizePanel( this.msPanel, 1 );\n  \n        if (this.gpuPanel) {\n          this.resizePanel( this.gpuPanel, 2 );\n        }\n      })\n    }\n\n  }\n\n  resizePanel( panel: Panel, offset: number) {\n\n    panel.canvas.style.position = 'absolute';\n\n    if ( this.minimal ) {\n\n      panel.canvas.style.display = 'none';\n\n    } else {\n\n      panel.canvas.style.display = 'block';\n      if (this.horizontal) {\n        panel.canvas.style.top = '0px';\n        panel.canvas.style.left = offset * panel.WIDTH / panel.PR + 'px';\n      } else {\n        panel.canvas.style.left = '0px';\n        panel.canvas.style.top = offset * panel.HEIGHT / panel.PR  + 'px';\n\n      }\n    }\n  }\n    \n  addPanel(panel: Panel, offset: number) {\n\n    if(panel.canvas) {\n\n      this.container.appendChild(panel.canvas);\n    \n      this.resizePanel(panel, offset);\n\n    }\n\n    return panel;\n\n  }\n\n  showPanel( id: number ) {\n\n    for ( let i = 0; i < this.container.children.length; i ++ ) {\n      const child = this.container.children[i] as HTMLElement;\n\n      child.style.display = i === id ? 'block' : 'none';\n\n    }\n\n    this.mode = id;\n\n  }\n\n  init( canvas: any ) {\n\n    this.canvasGpu = canvas;\n    if ( ! this.canvasGpu ) return;\n    this.gl = this.canvasGpu.getContext( 'webgl2' );\n    this.ext = this.gl ? this.gl.getExtension( 'EXT_disjoint_timer_query_webgl2' ) : null;\n    if ( this.ext ) {\n\n      this.gpuPanel = this.addPanel( new Stats.Panel( 'GPU', '#ff0', '#220' ), 2 );\n\n    }\n\n  }\n\n  begin() {\n\n    this.beginProfiling( 'cpu-started' );\n    if ( ! this.gl || ! this.ext ) return;\n\n\n    if ( this.query ) {\n\n      const available = this.gl.getQueryParameter( this.query, this.gl.QUERY_RESULT_AVAILABLE );\n      this.disjoint = this.gl.getParameter( this.ext.GPU_DISJOINT_EXT );\n\n      if ( available && ! this.disjoint ) {\n\n        this.ns = this.gl.getQueryParameter( this.query, this.gl.QUERY_RESULT );\n        const ms = this.ns * 1e-6;\n\n        if ( available || this.disjoint ) {\n\n          this.gl.deleteQuery( this.query );\n          this.query = null;\n\n        }\n\n        if ( available ) {\n\n          this.addToAverage( ms, this.averageGpu );\n\n        }\n\n      }\n\n    }\n\n    if ( ! this.query ) {\n\n      this.queryCreated = true;\n      this.query = this.gl.createQuery();\n\n      if ( this.query ) {\n        this.gl.beginQuery( this.ext.TIME_ELAPSED_EXT, this.query );\n      }\n\n    }\n\n  }\n\n  end() {\n\n    this.beginTime = this.endInternal()\n\n    this.endProfiling( 'cpu-started', 'cpu-finished', 'cpu-duration', this.averageCpu );\n\n    if ( ! this.gl || ! this.ext ) return;\n\n\n    if ( this.queryCreated && this.gl.getQuery( this.ext.TIME_ELAPSED_EXT, this.gl.CURRENT_QUERY ) ) {\n\n      this.gl.endQuery( this.ext.TIME_ELAPSED_EXT );\n\n    }\n\n\n  }\n\n  endInternal() {\n\n    this.frames ++;\n    const time = ( performance || Date ).now();\n\n    if (time >= this.prevCpuTime + 1000 / this.logsPerSecond) {\n      this.updatePanel( this.msPanel, this.averageCpu );\n      this.updatePanel( this.gpuPanel, this.averageGpu );\n\n      this.prevCpuTime = time;\n    }\n\n    if ( time >= this.prevTime + 1000 ) {\n\n      const fps = ( this.frames * 1000 ) / ( time - this.prevTime );\n\n      this.fpsPanel.update(fps, fps, 100, 100, 0);\n\n      this.prevTime = time;\n      this.frames = 0;\n\n    }\n\n    return time;\n\n  }\n\n  addToAverage( value: number, averageArray: { logs: any; graph: any; } ) {\n\n    averageArray.logs.push( value );\n    if ( averageArray.logs.length > this.samplesLog ) {\n\n      averageArray.logs.shift();\n\n    }\n\n    averageArray.graph.push( value );\n    if ( averageArray.graph.length > this.samplesGraph ) {\n\n      averageArray.graph.shift();\n\n    }\n\n  }\n\n  beginProfiling( marker: string ) {\n\n    if ( window.performance ) {\n\n      window.performance.mark( marker );\n\n    }\n\n  }\n\n  endProfiling( startMarker: string | PerformanceMeasureOptions | undefined, endMarker: string | undefined, measureName: string, averageArray: {logs: number[], graph: number[]} ) {\n\n    if ( window.performance && endMarker ) {\n\n      window.performance.mark( endMarker );\n      const cpuMeasure = performance.measure( measureName, startMarker, endMarker );\n      this.addToAverage( cpuMeasure.duration, averageArray );\n\n    }\n\n  }\n\n  updatePanel(panel: { update: any; } | null, averageArray: {logs: number[], graph: number[]}) {\n\n    if (averageArray.logs.length > 0) {\n\n      let sumLog = 0;\n      let max = 0.01;\n\n      for (let i = 0; i < averageArray.logs.length; i++) {\n\n        sumLog += averageArray.logs[i];\n\n        if (averageArray.logs[i] > max) {\n          max = averageArray.logs[i];\n        }\n\n      }\n\n      let sumGraph = 0;\n      let maxGraph = 0.01;\n      for (let i = 0; i < averageArray.graph.length; i++) {\n\n        sumGraph += averageArray.graph[i];\n\n        if (averageArray.graph[i] > maxGraph) {\n          maxGraph = averageArray.graph[i];\n        }\n\n      }\n\n      if (panel) {\n        panel.update(sumLog / Math.min(averageArray.logs.length,this.samplesLog), sumGraph / Math.min(averageArray.graph.length,this.samplesGraph), max, maxGraph, this.precision);\n      }\n\n    }\n  }\n\n\n}\n\n\nexport default Stats;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}